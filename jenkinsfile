pipeline {
    agent any

    environment {
        // Имя SSH-сервера, настроенного в Jenkins
        SSH_SERVER = "pavuk-ssh"
        // Путь к JAR-файлу после сборки (может отличаться в вашем проекте)
        JAR_FILE = "target/*.jar"
        // Удаленный каталог на сервере
        REMOTE_DIR = "config-app"
        // Имя сервиса (если используется systemd)
        SERVICE_NAME = "java-config-server.service"
    }

    stages {
        // Шаг 1: Получение кода из Git
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/test-fin-clust/TEST-Bag-Config-Server.git'
            }
        }

        // Шаг 2: Сборка проекта с Maven
        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        // Шаг 3: Развертывание на удаленном сервере по SSH
        stage('Deploy') {
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: "${SSH_SERVER}",
                            transfers: [
                                sshTransfer(
                                    sourceFiles: "${JAR_FILE}",
                                    removePrefix: "target",
                                    remoteDirectory: "${REMOTE_DIR}",
                                    execCommand: """
                                        # Останавливаем старую версию приложения (если работает)
                                        sudo systemctl stop ${SERVICE_NAME} || true
                                        # Запускаем новую версию
                                        sudo systemctl start ${SERVICE_NAME} || sudo systemctl restart ${SERVICE_NAME}
                                    """
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                            verbose: true
                        )
                    ]
                )
            }
        }
    }

    // Опционально: Уведомление о статусе сборки
    post {
        success {
            slackSend channel: '#deployments', message: "✅ SUCCESS: Spring Boot app deployed to ${SSH_SERVER}"
        }
        failure {
            slackSend channel: '#deployments', message: "❌ FAILED: Deployment failed (${env.JOB_NAME})"
        }
    }
}